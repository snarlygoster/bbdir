This allows you to create an alphabetical filter for a list of objects; e.g. Browse by title: A-G H-N O-Z. See this entry in Yahoo's design pattern library for more info.
NamePaginator works like Django's Paginator. You pass in a list of objects and how many you want per letter range ("page"). Then, it will dynamically generate the "pages" so that there are approximately per_page objects per page.
By dynamically generating the letter ranges, you avoid having too many objects in some letter ranges and too few in some. If your list is heavy on one end of the letter range, there will be more pages for that range.
It splits the pages on letter boundaries, so not all the pages will have exactly per_page objects. However, it will decide to overflow or underflow depending on which is closer to per_page.
NamePaginator Arguments:
    object_list: A list, dictionary, QuerySet, or something similar.
    on: If you specified a QuerySet, this is the field it will paginate on. In the example below, we're paginating a list of Contact objects, but the Contact.email string is what will be used in filtering.
    per_page: How many items you want per page.
Examples:
    >>> paginator = NamePaginator(Contacts.objects.all(), \
    ... on="email", per_page=10)
    
    >>> paginator.num_pages
    4
    >>> paginator.pages
    [A, B-R, S-T, U-Z]
    >>> paginator.count
    36
    
    >>> page = paginator.page(2)
    >>> page
    'B-R'
    >>> page.start_letter
    'B'
    >>> page.end_letter
    'R'
    >>> page.number
    2
    >>> page.count
    8
In your view, you have something like:
    contact_list = Contacts.objects.all()
    paginator = NamePaginator(contact_list, \
        on="first_name", per_page=25)
    
    try:
        page = int(request.GET.get('page', '1'))
    except ValueError:
        page = 1
    
    try:
        page = paginator.page(page)
    except (InvalidPage):
        page = paginator.page(paginator.num_pages)
    
    return render_to_response('list.html', {"page": page})
In your template, have something like:
    {% for object in page.object_list %}
    ...
    {% endfor %}
    
    <div class="pagination">
        Browse by title:
        {% for p in page.paginator.pages %}
    
          {% if p == page %}
              <span class="selected">{{ page }}</span>
          {% else %}
              <a href="?page={{ page.number }}">
                  {{ page }}
              </a>
          {% endif %}
    
        {% endfor %}
    </div>

It currently only supports paginating on alphabets (not alphanumeric) and will throw an exception if any of the strings it is paginating on are blank. You can fix either of those shortcomings pretty easily, though.

Author:zain
Posted:March 10, 2009
Language:PythonDjango 
Version:1.0
Tags:filtering paginator pagination 
Score:9 (after 9 ratings)
Tools
Download this snippet # based on djangosnippet 1364 http://djangosnippets.org/snippets/1364/
Comment on this snippet
        """ """
